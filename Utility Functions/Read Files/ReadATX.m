function [atxOut] = ReadATX(filename)%% ReadATX% Parse IGS antenna phase center offset/variation file (.atx)%% Required Inputs:%  filename            - location and filename of the .atx file%% Outputs %  atxOut              - structure containing antenna phase center offset%                        information% atx: PRN, SVN, Valid From, Valid To, x, y, z% blk: Block Typeatx = [];blk = [];pcv = []; % phase center variation per satellite by angle off nadir[fid, message] = fopen(filename, 'rt');if (fid == -1)    fprintf(2, 'Error open %s: %s\n', filename, message);    returnendtline = fgetl(fid);while ~strcmp(tline(61:73), 'END OF HEADER')    tline = fgetl(fid);endconsts = 'GRECJSI';atx = 1;tline = fgetl(fid);while ischar(tline)    % Search for start of next antenna    if strcmp(tline(61:76), 'START OF ANTENNA')        % Initialize parameters                        typei = nan; prni = []; svni = []; blki = [];        dazi = nan; dzen = nan(1,3); nfreq = nan; epochStart = -Inf; epochEnd = Inf;        snxCode = repmat(' ',1,10); apci = nan; freqDesignation = nan; pcvi = nan;                freqi = 0;        while ~strcmp(tline(61:min([74 length(tline)])),'END OF ANTENNA')                        % Skip comments            if contains(tline,'COMMENT')                tline = fgetl(fid);                continue;            end                        % Read each field            if strcmp(tline(61:min([76 length(tline)])), 'TYPE / SERIAL NO')                % Check if this is a satellite or receiver                if ~strcmp([tline(21) tline(41)],'  ')                    typei = strfind(consts,tline(21));                    prni  = str2double(tline(22:29));                    svni  = str2double(tline(42:49));                    blki  = tline(1:20);                else                    % NEED TO FILL THIS IN- STATION CODE?                     blki = tline(1:20);                    typei = 0;                end            end                        if strcmp(tline(61:64),'DAZI')                dazi = str2double(tline(5:8));            end                        if strcmp(tline(61:min([78 length(tline)])),'ZEN1 / ZEN2 / DZEN')                dzen = str2num(tline(6:20));            end                        if strcmp(tline(61:min([76 length(tline)])),'# OF FREQUENCIES')                nfreq = str2double(tline(5:6));                            end            if strcmp(tline(61:min([70 length(tline)])),'VALID FROM')               epochStart = cal2epochs(str2num(tline(1:60)));            end            if strcmp(tline(61:min([71 length(tline)])),'VALID UNTIL')               epochEnd = cal2epochs(str2num(tline(1:60)));            end                        if strcmp(tline(61:min([70 length(tline)])),'SINEX CODE')               snxCode = tline(1:10);            end                        if strcmp(tline(61:min([78 length(tline)])),'START OF FREQUENCY')                if freqi == 0                   % Initialize storage variables                     apci = nan(nfreq,3);                    freqDesignation = nan(nfreq,1);                    freqConst       = nan(nfreq,1);                                        nzen = (dzen(2)-dzen(1))/dzen(3)+1;                    if dazi == 0                        pcvi = nan(nfreq,nzen);                    else                        pcvi = nan(nfreq,nzen, 360/dazi+2);                    end                    freqi = freqi + 1;                end                                freqDesignation(freqi) = str2double(tline(5:6));                freqConst(freqi) =  strfind(consts,tline(4));                                % read APC and PCV values                % Read APC offset                tline = fgetl(fid);                if contains(tline,'NORTH / EAST / UP')                    apci(freqi,:) = str2num( tline(4:30));                end                                tline = fgetl(fid);                % Read no azimuth PCV                if strcmp(tline(4:8),'NOAZI')                   pcvi(freqi,:,1) = str2num( tline(11:end));                                      if dazi ~= 0                       nazi = 360/dazi+1;                       tline = fgetl(fid);                       for idx = 1:nazi                           pcvi(freqi,:,1+idx) = str2num(tline(11:end));                                                      tline = fgetl(fid);                       end                   end                end                                freqi = freqi + 1;                            end                        tline = fgetl(fid);        end                % Save off everything        atxOut(atx).type       = typei;        atxOut(atx).prn        = prni;        atxOut(atx).svn        = svni;        atxOut(atx).block      = blki;        atxOut(atx).dazi       = dazi;        atxOut(atx).dzen       = dzen;        atxOut(atx).nfreq      = nfreq;        atxOut(atx).epochStart = epochStart;        atxOut(atx).epochEnd   = epochEnd;        atxOut(atx).snxCode    = snxCode;        atxOut(atx).apc        = apci;        atxOut(atx).freq       = freqDesignation;        atxOut(atx).freqConst  = freqConst;        atxOut(atx).pcv        = pcvi;            end    atx = atx + 1;    tline = fgetl(fid);endfclose(fid);% s = 0;% while true%     tline = fgetl(fid);%     if ~ischar(tline), break, end%     if length(tline) < 77, continue, end%     switch s%         case 0%             if strcmp(tline(61:76), 'START OF ANTENNA')%                 s = 1;%             end%         case 1%             if strcmp(tline(61:76), 'TYPE / SERIAL NO')%                 if tline(21) == 'G' && tline(41) == 'G'%                     atx = [atx; zeros(1, 7)];%                     atx(end, 1) = str2double(tline(22:29));%                     atx(end, 2) = str2double(tline(42:49));%                     blk = [blk; tline(1:20)];%                     s = 3;%                 else%                     s = 0;%                     continue%                 end%             end%         case 3%             if strcmp(tline%%             if strcmp(tline(61:71), 'VALID FROM ')%                 atx(end, 3) = datenum(str2num(tline(1:60)));%                 tline = fgetl(fid);%                 if strcmp(tline(61:71), 'VALID UNTIL')%                     atx(end, 4) = datenum(str2num(tline(1:60)));%                 end%                 s = 5;%             end%         case 5%             if strcmp(tline(61:77), 'NORTH / EAST / UP')%                 atx(end, 5:7) = str2num(tline(1:60));%                 s = 0;%             end%     end% end%% fclose(fid);%% atx(:, 5:7) = 1e-3 .* atx(:, 5:7);%% if (nargin >= 2) && NGA%     NGAsaoStr = urlread('http://earth-info.nga.mil/GandG/sathtml/gpsdoc2012_10a.html');%     NGAsao = regexp(NGAsaoStr, 'Block\s+([0-9A-Z-]+)\s+PRN\s+([0-9]+)\s+-\s+Delta x=\s+([0-9.-]+), Delta y=\s+([0-9.-]+), Delta z=\s+([0-9.-]+)', 'tokens');%     for i = 1 : length(NGAsao)%         blkType = NGAsao{i}{1};%         if any(blkType == 'F')%             blkType = blkType(1:3);%         end%         idx = find(all(bsxfun(@eq, blk(:, 6+(1:length(blkType))), blkType), 2) & (atx(:, 1) == str2double(NGAsao{i}{2})));%         svn = atx(idx, 2);%         if isempty(svn)%             continue%         end%         atx(atx(:, 2) == svn, 5) = str2double(NGAsao{i}{3});%         atx(atx(:, 2) == svn, 6) = str2double(NGAsao{i}{4});%         atx(atx(:, 2) == svn, 7) = str2double(NGAsao{i}{5});%     end%     atx((blk(:,8)=='I') & ((blk(:,9)==' ') | (blk(:,9)=='A')), 7) = 0.9519; % BLOCK II/IIA%     atx((blk(:,8)=='I') & ((blk(:,9)==' ') | (blk(:,9)=='A')), 6) = 0;      % BLOCK II/IIA%     atx((blk(:,8)=='I') & ((blk(:,9)==' ') | (blk(:,9)=='A')), 5) = 0.2794; % BLOCK II/IIA% %     atx((blk(:,9)=='R') & (blk(:,11)=='A'), 7) = 1.5885;                    % BLOCK IIR-A% %     atx((blk(:,9)=='R') & ((blk(:,11)=='B') | (blk(:,11)=='M')), 7) = -0.01;                     % BLOCK IIR-B% end